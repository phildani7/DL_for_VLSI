{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of TensorFlow with GPU","version":"0.3.2","provenance":[{"file_id":"/v2/external/notebooks/gpu.ipynb","timestamp":1537599723334}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 2","name":"python2"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"BlmQIFSLZDdc","colab_type":"text"},"cell_type":"markdown","source":["# Confirm TensorFlow can see the GPU\n","\n","Simply select \"GPU\" in the Accelerator drop-down in Notebook Settings (either through the Edit menu or the command palette at cmd/ctrl-shift-P)."]},{"metadata":{"id":"3IEVK-KFxi5Z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"eacfcdc6-9ecd-4a1a-e57c-4ab59d5cc7f3","executionInfo":{"status":"ok","timestamp":1537598019612,"user_tz":-330,"elapsed":11731,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["import tensorflow as tf\n","device_name = tf.test.gpu_device_name()\n","if device_name != '/device:GPU:0':\n","  raise SystemError('GPU device not found')\n","print('Found GPU at: {}'.format(device_name))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Found GPU at: /device:GPU:0\n"],"name":"stdout"}]},{"metadata":{"id":"GYqc-njT-_aO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":768},"outputId":"0e0f20af-e674-4055-d3bc-3c512d24c51a","executionInfo":{"status":"ok","timestamp":1537598180889,"user_tz":-330,"elapsed":27674,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["!pip install dtw\n","!pip install librosa\n","from dtw import dtw\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import librosa\n","import IPython.display\n","from IPython.display import Image\n","%matplotlib inline"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting dtw\n","  Downloading https://files.pythonhosted.org/packages/31/47/2fcc0e83ab73dd399af329904954651f1cea6b191831f1b7654447181dc8/dtw-1.3.tar.gz\n","Requirement already satisfied: numpy in /usr/local/lib/python2.7/dist-packages (from dtw) (1.14.5)\n","Requirement already satisfied: scipy in /usr/local/lib/python2.7/dist-packages (from dtw) (0.19.1)\n","Building wheels for collected packages: dtw\n","  Running setup.py bdist_wheel for dtw ... \u001b[?25l-\b \bdone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/40/3e/69/ada210512f930d65418b619933ed1b234d92d07862d5b60fdc\n","Successfully built dtw\n","Installing collected packages: dtw\n","Successfully installed dtw-1.3\n","Collecting librosa\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/09/b4/5b411f19de48f8fc1a0ff615555aa9124952e4156e94d4803377e50cfa4c/librosa-0.6.2.tar.gz (1.6MB)\n","\u001b[K    100% |████████████████████████████████| 1.6MB 6.8MB/s \n","\u001b[?25hCollecting audioread>=2.0.0 (from librosa)\n","  Downloading https://files.pythonhosted.org/packages/f0/41/8cd160c6b2046b997d571a744a7f398f39e954a62dd747b2aae1ad7f07d4/audioread-2.1.6.tar.gz\n","Requirement already satisfied: numpy>=1.8.0 in /usr/local/lib/python2.7/dist-packages (from librosa) (1.14.5)\n","Requirement already satisfied: scipy>=0.14.0 in /usr/local/lib/python2.7/dist-packages (from librosa) (0.19.1)\n","Requirement already satisfied: scikit-learn!=0.19.0,>=0.14.0 in /usr/local/lib/python2.7/dist-packages (from librosa) (0.19.2)\n","Requirement already satisfied: joblib>=0.12 in /usr/local/lib/python2.7/dist-packages (from librosa) (0.12.5)\n","Requirement already satisfied: decorator>=3.0.0 in /usr/local/lib/python2.7/dist-packages (from librosa) (4.3.0)\n","Requirement already satisfied: six>=1.3 in /usr/local/lib/python2.7/dist-packages (from librosa) (1.11.0)\n","Collecting resampy>=0.2.0 (from librosa)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/14/b6/66a06d85474190b50aee1a6c09cdc95bb405ac47338b27e9b21409da1760/resampy-0.2.1.tar.gz (322kB)\n","\u001b[K    100% |████████████████████████████████| 327kB 11.2MB/s \n","\u001b[?25hCollecting numba>=0.38.0 (from librosa)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8c/8b/1f9eba219cc2ebcdd2bef9864984f47b80dbc86a8b87ede2654cbc533681/numba-0.40.0-cp27-cp27mu-manylinux1_x86_64.whl (2.4MB)\n","\u001b[K    100% |████████████████████████████████| 2.4MB 7.0MB/s \n","\u001b[?25hRequirement already satisfied: funcsigs in /usr/local/lib/python2.7/dist-packages (from numba>=0.38.0->librosa) (1.0.2)\n","Requirement already satisfied: enum34 in /usr/local/lib/python2.7/dist-packages (from numba>=0.38.0->librosa) (1.1.6)\n","Collecting llvmlite>=0.25.0dev0 (from numba>=0.38.0->librosa)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/03/cd/a29f3a1964c3a4198c44390516ac6e29115911104219ba7a8c7e924e818e/llvmlite-0.25.0-cp27-cp27mu-manylinux1_x86_64.whl (16.1MB)\n","\u001b[K    100% |████████████████████████████████| 16.1MB 1.9MB/s \n","\u001b[?25hRequirement already satisfied: singledispatch in /usr/local/lib/python2.7/dist-packages (from numba>=0.38.0->librosa) (3.4.0.3)\n","Building wheels for collected packages: librosa, audioread, resampy\n","  Running setup.py bdist_wheel for librosa ... \u001b[?25l-\b \b\\\b \bdone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/18/b8/10/f0f8f6ac60668a5cd75596cf14c25bb6b3ea1ecd815f058b7e\n","  Running setup.py bdist_wheel for audioread ... \u001b[?25l-\b \bdone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/53/02/90/7b5c4081b7470c550ab605f600bad237dde12a6b8999b11f50\n","  Running setup.py bdist_wheel for resampy ... \u001b[?25l-\b \bdone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/ff/4f/ed/2e6c676c23efe5394bb40ade50662e90eb46e29b48324c5f9b\n","Successfully built librosa audioread resampy\n","Installing collected packages: audioread, llvmlite, numba, resampy, librosa\n","Successfully installed audioread-2.1.6 librosa-0.6.2 llvmlite-0.25.0 numba-0.40.0 resampy-0.2.1\n"],"name":"stdout"}]},{"metadata":{"id":"RN6w88z3AMj1","colab_type":"code","colab":{}},"cell_type":"code","source":["yTest, srTest = librosa.load('kiran2-01.wav')\n","\n","y1, sr1 = librosa.load('Aman1-01.wav')\n","y2, sr2 = librosa.load('Aman2-01.wav')\n","y3, sr3 = librosa.load('kiran1-01.wav')\n","\n","\n","mfcc1 = librosa.feature.mfcc(y1, sr1)\n","mfcc2 = librosa.feature.mfcc(y2, sr2)\n","mfcc3 = librosa.feature.mfcc(y3, sr3)\n","mfccTest = librosa.feature.mfcc(yTest,srTest)\n","\n","\n","import copy\n","def preprocess_mfcc(mfcc):\n","    mfcc_cp = copy.deepcopy(mfcc)\n","    for i in xrange(mfcc.shape[1]):\n","        mfcc_cp[:,i] = mfcc[:,i] - np.mean(mfcc[:,i])\n","        mfcc_cp[:,i] = mfcc_cp[:,i]/np.max(np.abs(mfcc_cp[:,i]))\n","    return mfcc_cp\n","\n","mfcc1 = preprocess_mfcc(mfcc1)\n","mfcc2 = preprocess_mfcc(mfcc2)\n","mfcc3 = preprocess_mfcc(mfcc3)\n","mfccTest = preprocess_mfcc(mfccTest)\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wkJDKD6SE1bm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"outputId":"78fe81fe-827e-4b06-e17d-d1faf0f691f8","executionInfo":{"status":"ok","timestamp":1537599642386,"user_tz":-330,"elapsed":2719,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["window_size = mfcc1.shape[1]\n","dists = np.zeros(mfccTest.shape[1] - window_size)\n","\n","for i in range(len(dists)):\n","    mfcci = mfccTest[:,i:i+window_size]\n","    dist1i = dtw(mfcc1.T, mfcci.T,dist = lambda x, y: np.exp(np.linalg.norm(x - y, ord=1)))[0]\n","    dist2i = dtw(mfcc2.T, mfcci.T,dist = lambda x, y: np.exp(np.linalg.norm(x - y, ord=1)))[0]\n","    dist3i = dtw(mfcc3.T, mfcci.T,dist = lambda x, y: np.exp(np.linalg.norm(x - y, ord=1)))[0]\n","    dists[i] = (dist1i + dist2i + dist3i)/3\n","plt.plot(dists)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f99c0667e90>]"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7f99c3b29f50>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"Esm14Z3FE6yM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":197},"outputId":"429546e2-9efd-422c-e99f-bb21bc16e8bc","executionInfo":{"status":"error","timestamp":1537599677797,"user_tz":-330,"elapsed":1745,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["# select minimum distance window\n","word_match_idx = dists.argmin()\n","# convert MFCC to time domain\n","word_match_idx_bnds = np.array([word_match_idx,np.ceil(word_match_idx+window_size)])\n","samples_per_mfcc = 512\n","word_samp_bounds = (2/2) + (word_match_idx_bnds*samples_per_mfcc)\n","\n","word = yTest[word_samp_bounds[0]:word_samp_bounds[1]]"],"execution_count":0,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m\u001b[0m","\u001b[0;31mTypeError\u001b[0mTraceback (most recent call last)","\u001b[0;32m<ipython-input-15-d6cd215840b8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mword_samp_bounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mword_match_idx_bnds\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0msamples_per_mfcc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mword\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0myTest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mword_samp_bounds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mword_samp_bounds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: slice indices must be integers or None or have an __index__ method"]}]},{"metadata":{"id":"zH46D_56E8Ci","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"jXHECQQkE6vL","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"QXRh0DPiZRyG","colab_type":"text"},"cell_type":"markdown","source":["# Observe TensorFlow speedup on GPU relative to CPU\n","\n","This example constructs a typical convolutional neural network layer over a\n","random image and manually places the resulting ops on either the CPU or the GPU\n","to compare execution speed."]},{"metadata":{"id":"t9ALbbpmY9rm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":119},"outputId":"c5ee74e3-f88b-4660-dcba-354d09fa5659"},"cell_type":"code","source":["import tensorflow as tf\n","import timeit\n","\n","# See https://www.tensorflow.org/tutorials/using_gpu#allowing_gpu_memory_growth\n","config = tf.ConfigProto()\n","config.gpu_options.allow_growth = True\n","\n","with tf.device('/cpu:0'):\n","  random_image_cpu = tf.random_normal((100, 100, 100, 3))\n","  net_cpu = tf.layers.conv2d(random_image_cpu, 32, 7)\n","  net_cpu = tf.reduce_sum(net_cpu)\n","\n","with tf.device('/gpu:0'):\n","  random_image_gpu = tf.random_normal((100, 100, 100, 3))\n","  net_gpu = tf.layers.conv2d(random_image_gpu, 32, 7)\n","  net_gpu = tf.reduce_sum(net_gpu)\n","\n","sess = tf.Session(config=config)\n","\n","# Test execution once to detect errors early.\n","try:\n","  sess.run(tf.global_variables_initializer())\n","except tf.errors.InvalidArgumentError:\n","  print(\n","      '\\n\\nThis error most likely means that this notebook is not '\n","      'configured to use a GPU.  Change this in Notebook Settings via the '\n","      'command palette (cmd/ctrl-shift-P) or the Edit menu.\\n\\n')\n","  raise\n","\n","def cpu():\n","  sess.run(net_cpu)\n","  \n","def gpu():\n","  sess.run(net_gpu)\n","  \n","# Runs the op several times.\n","print('Time (s) to convolve 32x7x7x3 filter over random 100x100x100x3 images '\n","      '(batch x height x width x channel). Sum of ten runs.')\n","print('CPU (s):')\n","cpu_time = timeit.timeit('cpu()', number=10, setup=\"from __main__ import cpu\")\n","print(cpu_time)\n","print('GPU (s):')\n","gpu_time = timeit.timeit('gpu()', number=10, setup=\"from __main__ import gpu\")\n","print(gpu_time)\n","print('GPU speedup over CPU: {}x'.format(int(cpu_time/gpu_time)))\n","\n","sess.close()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Time (s) to convolve 32x7x7x3 filter over random 100x100x100x3 images (batch x height x width x channel). Sum of ten runs.\n","CPU (s):\n","8.350230318000058\n","GPU (s):\n","0.1842791589999706\n","GPU speedup over CPU: 45x\n"],"name":"stdout"}]}]}